window.SIDEBAR_ITEMS = {"constant":[["START_INDEX",""]],"enum":[["UserType","A user-given type annotation attached to a constant. These arise from constants that are named via paths, like `Foo::<A>::new` and so forth."]],"fn":[["invalid_hir_id_for_typeck_results",""],["validate_hir_id_for_typeck_results","Validate that the given HirId (respectively its `local_id` part) can be safely used as a key in the maps of a TypeckResults. For that to be the case, the HirId must have the same `owner` as all the other IDs in this table (signified by `hir_owner`). Otherwise the HirId would be in a different frame of reference and using its `local_id` would result in lookup errors, or worse, in silently wrong data being stored/returned."]],"struct":[["CanonicalUserTypeAnnotation",""],["GeneratorDiagnosticData",""],["GeneratorInteriorTypeCause","Whenever a value may be live across a generator yield, the type of that value winds up in the `GeneratorInteriorTypeCause` struct. This struct adds additional information about such captured types that can be useful for diagnostics. In particular, it stores the span that caused a given type to be recorded, along with the scope that enclosed the value (which can be used to find the await that the value is live across)."],["LocalTableInContext",""],["LocalTableInContextMut",""],["TypeckResults",""],["UserTypeAnnotationIndex",""]],"type":[["CanonicalUserType","Canonicalized user type annotation."],["CanonicalUserTypeAnnotations","Mapping of type annotation indices to canonical user type annotations."]]};